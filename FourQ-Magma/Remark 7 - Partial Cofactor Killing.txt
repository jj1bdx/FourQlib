/*************************************************************************************
* FourQ: 4-dimensional decomposition on a Q-curve with CM in twisted Edwards form
*
*    Copyright (c) Microsoft Corporation. All rights reserved.
*
*
* Abstract: MAGMA script used to show Remark 7, i.e., that part of the cofactor could be
* killed for free by absorbing it into the lattice \tilde{L} of index 4 in L.
*
* This code is based on the paper "FourQ: four-dimensional decompositions on a 
* Q-curve over the Mersenne prime" by Craig Costello and Patrick Longa, in Advances 
* in Cryptology - ASIACRYPT, 2015.
* Preprint available at http://eprint.iacr.org/2015/565.
**************************************************************************************/  

clear;

//constants from the paper
p:=2^127-1;
N:=73846995687063900142583536357581573884798075859800097461294096333596429543;
V:=49293975489306344711751403123270296814; r:=15437785290780909242;
assert V mod r eq 0;
alpha:=V div r;
//eigenvalue from Equation (9)
lambda_psi:=Integers()!(GF(N)!(4*(p+1)/r));
//eigenvalue from Equation (12)
lambda_phi:=Integers()!(GF(N)!(4*(p-1)*r^3/((p+1)^2*V)));

//Define (bad) basis of \tilde{L}
Btil:=Matrix(Integers(),4,4,
[4*N,0,0,0,
-lambda_phi,1,0,0,
-lambda_psi,0,1,0,
-lambda_phi*lambda_psi,0,0,1
]);

Ltil:=Lattice(Btil);
Ltil:=LLL(Ltil);
Btil:=Basis(Ltil);
assert Determinant(Ltil) eq (4*N)^2;

/* 
define width function w as needed in Definition 1:
this is the width of the smallest 4-cube containing B's fundamental parallelepiped
*/

w:=function(B)

    col1:=Abs(B[1,1])+Abs(B[2,1])+Abs(B[3,1])+Abs(B[4,1]);
    col2:=Abs(B[1,2])+Abs(B[2,2])+Abs(B[3,2])+Abs(B[4,2]);
    col3:=Abs(B[1,3])+Abs(B[2,3])+Abs(B[3,3])+Abs(B[4,3]);
    col4:=Abs(B[1,4])+Abs(B[2,4])+Abs(B[3,4])+Abs(B[4,4]);
    
    return Max([col1,col2,col3,col4]);

end function;

//compute width
width:=w(Btil);

/*
We use Remark 2 again. We are only interested in vectors of infinity norm at most 
width. But Magma enumerates under the 2 norm, so we enumerate all vectors up to 
(squared) norm 4*width^2 using "ShortVectors"
*/

inf_norm:=function(v)
    max:=0;
    for i:=1 to 4 do
        if Abs(v[i]) gt max then
            max:=Abs(v[i]);
        end if;
    end for;
    return max;
end function;

S:=ShortVectors(Ltil,4*width^2);
S:={i[1]: i in S| inf_norm(i[1]) le width};

/*
Now test S for all Rank(4) basis and compute the width. Don't enter the inner "for"
 loop unless the first 3 vectors give a (premature) width smaller than "width".
outputs Babai-optimal basis 
*/
//loop below takes a while: commented out for now and output defined below 
/*
for b1 in S do
    for b2 in S do
        for b3 in S do
            col1:=Abs(b1[1])+Abs(b2[1])+Abs(b3[1]);
            col2:=Abs(b1[2])+Abs(b2[2])+Abs(b3[2]);
            col3:=Abs(b1[3])+Abs(b2[3])+Abs(b3[3]);
            col4:=Abs(b1[4])+Abs(b2[4])+Abs(b3[4]);
            if Max([col1,col2,col3,col4]) lt width then
                for b4 in S do
                    M:=Matrix(Integers(),4,4,
                        [b1[1],b1[2],b1[3],b1[4],
                        b2[1],b2[2],b2[3],b2[4],
                        b3[1],b3[2],b3[3],b3[4],
                        b4[1],b4[2],b4[3],b4[4]
                        ]);
                    if Rank(M) eq 4 then
                        if w(M) lt width then
                            "better basis found";
                            Btil_opt:=M; //new best basis
                            width:=w(M);
                        end if;   
                    end if;
                end for;
            end if;
        end for;
    end for;
end for;
*/

Btil_opt:=Matrix(Rationals(),4,4,
[4505874732837540732, 4087522966003566802, 3439991783225194324,-2813520154167429181,
2110318963211420372, -1, 1, 2727991412926801872,
1055159481605710184, -1596536503158376434, 3859446322695227311, 1363995706463400936,
1300975485878092588, -2794431640553937728, 1046172548541187614,-1197648757382171810]);

/*
LLL (i.e., 2-norm) reduced Basis is Babai-optimal. Now check that fundamental 
parallelepiped fits in absolute value 2^62.
*/

for s1 in  [-1/2,1/2] do
    for s2 in  [-1/2,1/2] do
        for s3 in  [-1/2,1/2] do
            for s4 in  [-1/2,1/2] do

                corner:=s1*Btil_opt[1]+s2*Btil_opt[2]+s3*Btil_opt[3]+s4*Btil_opt[4];

                assert Abs(Rationals()!corner[1]) lt 2^62;
                assert Abs(Rationals()!corner[2]) lt 2^62;
                assert Abs(Rationals()!corner[3]) lt 2^62;
                assert Abs(Rationals()!corner[4]) lt 2^62;

            end for;
        end for;
    end for;
end for;

