/*************************************************************************************
* FourQ: 4-dimensional decomposition on a Q-curve with CM in twisted Edwards form
*
*    Copyright (c) Microsoft Corporation. All rights reserved.
*
*
* Abstract: MAGMA script used to show Babai-optimal basis in Proposition 3 and the 
*			enumeration hack discussed in Remark 3.
*
* This code is based on the paper "FourQ: four-dimensional decompositions on a 
* Q-curve over the Mersenne prime" by Craig Costello and Patrick Longa, in Advances 
* in Cryptology - ASIACRYPT, 2015.
* Preprint available at http://eprint.iacr.org/2015/565.
**************************************************************************************/  

clear;

//constants from the paper
p:=2^127-1;
V:=49293975489306344711751403123270296814; r:=15437785290780909242;
N:=73846995687063900142583536357581573884798075859800097461294096333596429543;
assert V mod r eq 0;
alpha:=V div r;

//eigenvalue from Equation (9)
lambda_psi:=Integers()!(GF(N)!(4*(p+1)/r));
//eigenvalue from Equation (12)
lambda_phi:=Integers()!(GF(N)!(4*(p-1)*r^3/((p+1)^2*V)));

//take claimed Babai-optimal basis from Proposition 3

B:=Matrix(Integers(),4,4,
[16*(-60*alpha+13*r-10), 4*(-10*alpha-3*r+12), 4*(-15*alpha+5*r-13), -13*alpha-6*r+3,
32*(5*alpha-r), -8, 8, 2*alpha+r,
16*(80*alpha-15*r+18), 4*(18*alpha-3*r-16), 4*(-15*alpha-9*r+15), 15*alpha+8*r+3,
16*(-360*alpha+77*r+42), 4*(42*alpha+17*r+72), 4*(85*alpha-21*r-77),(-77*alpha-36*r-17)
]);

for i:=1 to 4 do
        assert B[1,i] mod 224 eq 0; B[1,i]:=B[1,i] div 224;
        assert B[2,i] mod 8 eq 0;   B[2,i]:=B[2,i] div 8;
        assert B[3,i] mod 224 eq 0; B[3,i]:=B[3,i] div 224;
        assert B[4,i] mod 448 eq 0; B[4,i]:=B[4,i] div 448;
end for;

// first, show that basis vectors are in L
for i:=1 to 4 do
    assert (B[i,1]+B[i,2]*lambda_phi+B[i,3]*lambda_psi+B[i,4]*lambda_phi*lambda_psi) mod N eq 0;
end for;

// show that |Det(B)| = N, so that B is a basis for L
assert Abs(Determinant(B)) eq N;

/* define width function w as needed in Definition 1:
this is the width of the smallest 4-cube containing B's fundamental parallelepiped
*/

w:=function(B)

    col1:=Abs(B[1,1])+Abs(B[2,1])+Abs(B[3,1])+Abs(B[4,1]);
    col2:=Abs(B[1,2])+Abs(B[2,2])+Abs(B[3,2])+Abs(B[4,2]);
    col3:=Abs(B[1,3])+Abs(B[2,3])+Abs(B[3,3])+Abs(B[4,3]);
    col4:=Abs(B[1,4])+Abs(B[2,4])+Abs(B[3,4])+Abs(B[4,4]);
    
    return Max([col1,col2,col3,col4]);

end function;

//show that width of B is as claimed
widB:=w(B);

assert widB eq (245*alpha+120*r+17) div 448;

/*
Here's where Remark 3 comes in. We are only interested in vectors of infinity norm 
at most widB. But Magma enumerates under the 2 norm, so we enumerate all vectors 
up to (squared) norm 4*widB^2 using "ShortVectors"
*/

inf_norm:=function(v)
    max:=0;
    for i:=1 to 4 do
        if Abs(v[i]) gt max then
            max:=Abs(v[i]);
        end if;
    end for;
    return max;
end function;

L:=LatticeWithBasis(B);
S:=ShortVectors(L,4*widB^2);
S:={i[1]: i in S| inf_norm(i[1]) le widB};
assert #S eq 128;

/*
Now test S for all Rank(4) basis and compute the width. Don't enter the inner "for"
loop unless the first 3 vectors give a (premature) width smaller than widB.
assert that all combinations have width at least that of our basis B.
*/
for b1 in S do
    for b2 in S do
        for b3 in S do
            col1:=Abs(b1[1])+Abs(b2[1])+Abs(b3[1]);
            col2:=Abs(b1[2])+Abs(b2[2])+Abs(b3[2]);
            col3:=Abs(b1[3])+Abs(b2[3])+Abs(b3[3]);
            col4:=Abs(b1[4])+Abs(b2[4])+Abs(b3[4]);
            if Max([col1,col2,col3,col4]) lt widB then
                for b4 in S do
                    M:=Matrix(Integers(),4,4,
                        [b1[1],b1[2],b1[3],b1[4],
                        b2[1],b2[2],b2[3],b2[4],
                        b3[1],b3[2],b3[3],b3[4],
                        b4[1],b4[2],b4[3],b4[4]
                        ]);
                    if Rank(M) eq 4 then
                        assert w(M) ge widB;   
                    end if;
                end for;
            end if;
        end for;
    end for;
end for;
